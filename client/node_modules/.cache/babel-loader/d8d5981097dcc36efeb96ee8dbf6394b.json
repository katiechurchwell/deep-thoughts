{"ast":null,"code":"var _jsxFileName = \"/Users/katiechurchwell/Desktop/code/projects/deep-thoughts/client/src/components/ThoughtForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThoughtForm = () => {\n  _s();\n\n  const [thoughtText, setText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addThought, {\n    error\n  }] = useMutation(ADD_THOUGHT, {\n    update(cache, _ref) {\n      let {\n        data: {\n          addThought\n        }\n      } = _ref;\n\n      try {\n        // update thought array's cache\n        // could potentially not exist yet, so wrap in a try/catch\n        const {\n          thoughts\n        } = cache.readQuery({\n          query: QUERY_THOUGHTS\n        });\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: {\n            thoughts: [addThought, ...thoughts]\n          }\n        });\n      } catch (e) {\n        console.error(e);\n      } // update me object's cache\n\n\n      const {\n        me\n      } = cache.readQuery({\n        query: QUERY_ME\n      });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: {\n          me: { ...me,\n            thoughts: [...me.thoughts, addThought]\n          }\n        }\n      });\n    }\n\n  }); // update state based on form input changes\n\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  }; // submit form\n\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      await addThought({\n        variables: {\n          thoughtText\n        }\n      }); // clear form value\n\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: `m-0 ${characterCount === 280 || error ? 'text-error' : ''}`,\n      children: [\"Character Count: \", characterCount, \"/280\", error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: \"Something went wrong...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex-row justify-center justify-space-between-md align-stretch\",\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Here's a new thought...\",\n        value: thoughtText,\n        className: \"form-input col-12 col-md-9\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn col-12 col-md-3\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThoughtForm, \"XrYxD22tnNE676rE3nyqO7x+EU0=\", false, function () {\n  return [useMutation];\n});\n\n_c = ThoughtForm;\nexport default ThoughtForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThoughtForm\");","map":{"version":3,"sources":["/Users/katiechurchwell/Desktop/code/projects/deep-thoughts/client/src/components/ThoughtForm/index.js"],"names":["React","useState","useMutation","ADD_THOUGHT","QUERY_THOUGHTS","QUERY_ME","ThoughtForm","thoughtText","setText","characterCount","setCharacterCount","addThought","error","update","cache","data","thoughts","readQuery","query","writeQuery","e","console","me","handleChange","event","target","value","length","handleFormSubmit","preventDefault","variables"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,OAAd,IAAyBP,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,CAAD,CAApD;AAEA,QAAM,CAACU,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA0BV,WAAW,CAACC,WAAD,EAAc;AACvDU,IAAAA,MAAM,CAACC,KAAD,QAAkC;AAAA,UAA1B;AAAEC,QAAAA,IAAI,EAAE;AAAEJ,UAAAA;AAAF;AAAR,OAA0B;;AACtC,UAAI;AACF;AACA;AACA,cAAM;AAAEK,UAAAA;AAAF,YAAeF,KAAK,CAACG,SAAN,CAAgB;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAAhB,CAArB;AACAU,QAAAA,KAAK,CAACK,UAAN,CAAiB;AACfD,UAAAA,KAAK,EAAEd,cADQ;AAEfW,UAAAA,IAAI,EAAE;AAAEC,YAAAA,QAAQ,EAAE,CAACL,UAAD,EAAa,GAAGK,QAAhB;AAAZ;AAFS,SAAjB;AAID,OARD,CAQE,OAAOI,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACT,KAAR,CAAcQ,CAAd;AACD,OAXqC,CAatC;;;AACA,YAAM;AAAEE,QAAAA;AAAF,UAASR,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAf;AACAS,MAAAA,KAAK,CAACK,UAAN,CAAiB;AACfD,QAAAA,KAAK,EAAEb,QADQ;AAEfU,QAAAA,IAAI,EAAE;AAAEO,UAAAA,EAAE,EAAE,EAAE,GAAGA,EAAL;AAASN,YAAAA,QAAQ,EAAE,CAAC,GAAGM,EAAE,CAACN,QAAP,EAAiBL,UAAjB;AAAnB;AAAN;AAFS,OAAjB;AAID;;AApBsD,GAAd,CAA3C,CAJwB,CA2BxB;;AACA,QAAMY,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAAnB,IAA6B,GAAjC,EAAsC;AACpCnB,MAAAA,OAAO,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACAhB,MAAAA,iBAAiB,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAApB,CAAjB;AACD;AACF,GALD,CA5BwB,CAmCxB;;;AACA,QAAMC,gBAAgB,GAAG,MAAOJ,KAAP,IAAiB;AACxCA,IAAAA,KAAK,CAACK,cAAN;;AAEA,QAAI;AACF,YAAMlB,UAAU,CAAC;AACfmB,QAAAA,SAAS,EAAE;AAAEvB,UAAAA;AAAF;AADI,OAAD,CAAhB,CADE,CAKF;;AACAC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACD,KARD,CAQE,OAAOU,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACT,KAAR,CAAcQ,CAAd;AACD;AACF,GAdD;;AAgBA,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAG,OAAMX,cAAc,KAAK,GAAnB,IAA0BG,KAA1B,GAAkC,YAAlC,GAAiD,EAAG,EADxE;AAAA,sCAGoBH,cAHpB,UAIGG,KAAK,iBAAI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AACE,MAAA,SAAS,EAAC,gEADZ;AAEE,MAAA,QAAQ,EAAEgB,gBAFZ;AAAA,8BAIE;AACE,QAAA,WAAW,EAAC,yBADd;AAEE,QAAA,KAAK,EAAErB,WAFT;AAGE,QAAA,SAAS,EAAC,4BAHZ;AAIE,QAAA,QAAQ,EAAEgB;AAJZ;AAAA;AAAA;AAAA;AAAA,cAJF,eAUE;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,IAAI,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA5ED;;GAAMjB,W;UAI4BJ,W;;;KAJ5BI,W;AA8EN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n  const [thoughtText, setText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        // update thought array's cache\n        // could potentially not exist yet, so wrap in a try/catch\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      // update me object's cache\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } },\n      });\n    },\n  });\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      await addThought({\n        variables: { thoughtText },\n      });\n\n      // clear form value\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <p\n        className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          value={thoughtText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleChange}\n        ></textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n"]},"metadata":{},"sourceType":"module"}